apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'walle'

android {
    def versions = rootProject.ext.android
    compileSdkVersion versions.compileSdkVersion
    buildToolsVersion versions.buildToolsVersion

    defaultConfig {
        applicationId "com.ben.template"
        minSdkVersion versions.minSdkVersion
        targetSdkVersion versions.targetSdkVersion
        versionCode versions.versionCode
        versionName versions.versionName
    }

    signingConfigs {
        release {
            storeFile file("BenheroGithub.jks")
            storePassword "BenheroGithub"
            keyAlias "BenheroGithub"
            keyPassword "BenheroGithub"
        }
        debug {
            storeFile file("BenheroGithub.jks")
            storePassword "BenheroGithub"
            keyAlias "BenheroGithub"
            keyPassword "BenheroGithub"
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            signingConfig signingConfigs.debug
        }
        release {
            minifyEnabled true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    dataBinding {
        enabled = true
    }
}

walle {
    // 指定渠道包的输出路径
    apkOutputFolder = new File("${project.buildDir}/outputs/channels")
    // 定制渠道包的APK的文件名称
    apkFileNameFormat = '${appName}-${packageName}-${channel}-${buildType}-v${versionName}-${versionCode}-${buildTime}.apk'
    // 渠道配置文件
    channelFile = new File("${project.getProjectDir()}/channel")
}

dependencies {
    def dependencies = rootProject.ext.dependencies

    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(':XFramework')
    if (aar.toBoolean()) {
//        implementation files('../learnGradle/export/learnGradle-release.aar')
        implementation fileTree(dir: '../learnGradle/export', include: ['*.aar'])
    } else {
        implementation project(':LearnGradle')
    }

    implementation dependencies.'kotlin'
    implementation dependencies.'coroutines-core'
    implementation dependencies.'coroutines-android'

    implementation dependencies.'appcompat'
    implementation dependencies.'core-ktx'
    implementation dependencies.'constraint-layout'
    implementation dependencies.'recyclerview'

    implementation dependencies.'retrofit'
    implementation dependencies.'retrofit-gson'

    implementation dependencies.'walle'
}
